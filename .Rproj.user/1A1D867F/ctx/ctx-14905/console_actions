{
    "type": [
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "library(NBkde)",
        "> ",
        "x <- PlantGrowth[, 1]",
        "> ",
        "y <- PlantGrowth[,2]",
        "> ",
        "fit <- fit_nbkde(x, y)",
        "Error in matrix(NA, ncol = n_class, nrow = n_x) : \n  non-numeric matrix extent\n",
        "> ",
        "  n_x = ncol(x) # no. of column in x",
        "> ",
        "  n_class = length(unique(y)) # no. of class",
        "> ",
        "  class_name = unique(y) #name of the class",
        "> ",
        "  prior = rep(NA, n_class)",
        "> ",
        "  for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "    class = noquote(as.character(unique(y)))",
        "+ ",
        "    prior[k] = length(which(y == class[k]))/length(y)",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  length_prior = length(prior) # no. of prior",
        "> ",
        "  if (length_prior != n_class) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"prior must have the same length as the number or class\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  if (sum(prior) != 1) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"sum of prior must equal to 1\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  data <- cbind(x, y)",
        "> ",
        "  subset_data = subset.data(data)",
        "> ",
        "  h = matrix(NA, ncol = n_class, nrow = n_x)",
        "Error in matrix(NA, ncol = n_class, nrow = n_x) : \n  non-numeric matrix extent\n",
        "> ",
        "n_class",
        "[1] 3\n",
        "> ",
        "n_x",
        "NULL\n",
        "> ",
        "ncol(x)",
        "NULL\n",
        "> ",
        "x",
        " [1] 4.17 5.58 5.18 6.11 4.50 4.61 5.17 4.53 5.33 5.14\n[11] 4.81 4.17 4.41 3.59 5.87 3.83 6.03 4.89 4.32 4.69\n[21] 6.31 5.12 5.54 5.50 5.37 5.29 4.92 6.15 5.80 5.26\n",
        "> ",
        "x <- as.matrix(PlantGrowth[, 1])",
        "> ",
        "fit <- fit_nbkde(x, y)",
        "Error in bw.nrd0(subset_data[[j]][, i]) : need at least 2 data points\n",
        "> ",
        "  n_x = ncol(x) # no. of column in x",
        "> ",
        "  n_class = length(unique(y)) # no. of class",
        "> ",
        "  class_name = unique(y) #name of the class",
        "> ",
        "  prior = rep(NA, n_class)",
        "> ",
        "  for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "    class = noquote(as.character(unique(y)))",
        "+ ",
        "    prior[k] = length(which(y == class[k]))/length(y)",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "n_x ",
        "[1] 1\n",
        "> ",
        "  for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "    class = noquote(as.character(unique(y)))",
        "+ ",
        "    prior[k] = length(which(y == class[k]))/length(y)",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  length_prior = length(prior) # no. of prior",
        "> ",
        "  if (length_prior != n_class) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"prior must have the same length as the number or class\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  if (sum(prior) != 1) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"sum of prior must equal to 1\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  data <- cbind(x, y)",
        "> ",
        "  subset_data = subset.data(data)",
        "> ",
        "  h = matrix(NA, ncol = n_class, nrow = n_x)",
        "> ",
        "  if (is.character(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (bw == \"Silverman\") {",
        "+ ",
        "",
        "+ ",
        "      for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "        for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = round(bw.nrd0(subset_data[[j]][,i]),4)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    } else if (bw == \"SJ\") {",
        "+ ",
        "",
        "+ ",
        "        for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "          for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = bw.SJ(subset_data[[j]][,i])",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "  if (is.null(bw)) {",
        "+ ",
        "",
        "+ ",
        "    ind = list()",
        "+ ",
        "    train = list()",
        "+ ",
        "    test = list()",
        "+ ",
        "",
        "+ ",
        "    for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "      ind[[k]] <- sample(2, nrow(subset_data[[k]]),",
        "+ ",
        "                         replace = T, prob = c(0.8, 0.2))",
        "+ ",
        "",
        "+ ",
        "      train[[k]] <- subset_data[[k]][ind[[k]] == 1,]",
        "+ ",
        "      test[[k]] <- subset_data[[k]][ind[[k]] == 2,]",
        "+ ",
        "",
        "+ ",
        "      for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "        h[i,k] = grid_loss(train = train[[k]][, i], test = test[[k]][,i])",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "Error in t_train_rep - test_rep : non-numeric argument to binary operator\n",
        "> ",
        "    if (is.numeric(bw)) {",
        "+ ",
        "",
        "+ ",
        "          if (length(bw) != n_x * n_class) {",
        "+ ",
        "",
        "+ ",
        "             stop(\"Number of bandwidth is invalid\")",
        "+ ",
        "",
        "+ ",
        "        } else {",
        "+ ",
        "",
        "+ ",
        "      h= matrix(bw, byrow = T, ncol = n_class)",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "> ",
        "   if (is.matrix(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (nrow(bw) != n_x) {",
        "+ ",
        "",
        "+ ",
        "      stop(\"Number of row for bandwidth is invalid. Number of column must equal to number of class\")",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "",
        "+ ",
        "    if (ncol(bw) != n_class) {",
        "+ ",
        "",
        "+ ",
        "      h = matrix(rep(bw, n_class), ncol= n_class)",
        "+ ",
        "",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "   }",
        "> ",
        "n_class",
        "[1] 3\n",
        "> ",
        "n_x",
        "[1] 1\n",
        "> ",
        " h = matrix(NA, ncol = n_class, nrow = n_x)",
        "> ",
        " h",
        "     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n",
        "> ",
        "  subset_data",
        "[[1]]\n      y\n\n[[2]]\n      y\n\n[[3]]\n      y\n\n",
        "> ",
        "data",
        "           y\n [1,] 4.17 1\n [2,] 5.58 1\n [3,] 5.18 1\n [4,] 6.11 1\n [5,] 4.50 1\n [6,] 4.61 1\n [7,] 5.17 1\n [8,] 4.53 1\n [9,] 5.33 1\n[10,] 5.14 1\n[11,] 4.81 2\n[12,] 4.17 2\n[13,] 4.41 2\n[14,] 3.59 2\n[15,] 5.87 2\n[16,] 3.83 2\n[17,] 6.03 2\n[18,] 4.89 2\n[19,] 4.32 2\n[20,] 4.69 2\n[21,] 6.31 3\n[22,] 5.12 3\n[23,] 5.54 3\n[24,] 5.50 3\n[25,] 5.37 3\n[26,] 5.29 3\n[27,] 4.92 3\n[28,] 6.15 3\n[29,] 5.80 3\n[30,] 5.26 3\n",
        "> ",
        "subset_data = subset.data(data)",
        "> ",
        "  subset_data",
        "[[1]]\n      y\n\n[[2]]\n      y\n\n[[3]]\n      y\n\n",
        "> ",
        "subset(matrix(data))",
        "      [,1]\n [1,] 4.17\n [2,] 5.58\n [3,] 5.18\n [4,] 6.11\n [5,] 4.50\n [6,] 4.61\n [7,] 5.17\n [8,] 4.53\n [9,] 5.33\n[10,] 5.14\n[11,] 4.81\n[12,] 4.17\n[13,] 4.41\n[14,] 3.59\n[15,] 5.87\n[16,] 3.83\n[17,] 6.03\n[18,] 4.89\n[19,] 4.32\n[20,] 4.69\n[21,] 6.31\n[22,] 5.12\n[23,] 5.54\n[24,] 5.50\n[25,] 5.37\n[26,] 5.29\n[27,] 4.92\n[28,] 6.15\n[29,] 5.80\n[30,] 5.26\n[31,] 1.00\n[32,] 1.00\n[33,] 1.00\n[34,] 1.00\n[35,] 1.00\n[36,] 1.00\n[37,] 1.00\n[38,] 1.00\n[39,] 1.00\n[40,] 1.00\n[41,] 2.00\n[42,] 2.00\n[43,] 2.00\n[44,] 2.00\n[45,] 2.00\n[46,] 2.00",
        "\n[47,] 2.00\n[48,] 2.00\n[49,] 2.00\n[50,] 2.00\n[51,] 3.00\n[52,] 3.00\n[53,] 3.00\n[54,] 3.00\n[55,] 3.00\n[56,] 3.00\n[57,] 3.00\n[58,] 3.00\n[59,] 3.00\n[60,] 3.00\n",
        "> ",
        "  data <- as.data.frame(cbind(x, y))",
        "> ",
        "  subset_data = subset.data(data)",
        "> ",
        "  h = matrix(NA, ncol = n_class, nrow = n_x)",
        "> ",
        "  if (is.character(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (bw == \"Silverman\") {",
        "+ ",
        "",
        "+ ",
        "      for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "        for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = round(bw.nrd0(subset_data[[j]][,i]),4)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    } else if (bw == \"SJ\") {",
        "+ ",
        "",
        "+ ",
        "        for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "          for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = bw.SJ(subset_data[[j]][,i])",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "  if (is.null(bw)) {",
        "+ ",
        "",
        "+ ",
        "    ind = list()",
        "+ ",
        "    train = list()",
        "+ ",
        "    test = list()",
        "+ ",
        "",
        "+ ",
        "    for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "      ind[[k]] <- sample(2, nrow(subset_data[[k]]),",
        "+ ",
        "                         replace = T, prob = c(0.8, 0.2))",
        "+ ",
        "",
        "+ ",
        "      train[[k]] <- subset_data[[k]][ind[[k]] == 1,]",
        "+ ",
        "      test[[k]] <- subset_data[[k]][ind[[k]] == 2,]",
        "+ ",
        "",
        "+ ",
        "      for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "        h[i,k] = grid_loss(train = train[[k]][, i], test = test[[k]][,i])",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "Error in t_train_rep - test_rep : non-numeric argument to binary operator\n",
        "> ",
        "  subset_data",
        "[[1]]\n     V1 y\n1  4.17 1\n2  5.58 1\n3  5.18 1\n4  6.11 1\n5  4.50 1\n6  4.61 1\n7  5.17 1\n8  4.53 1\n9  5.33 1\n10 5.14 1\n\n[[2]]\n     V1 y\n11 4.81 2\n12 4.17 2\n13 4.41 2\n14 3.59 2\n15 5.87 2\n16 3.83 2\n17 6.03 2\n18 4.89 2\n19 4.32 2\n20 4.69 2\n\n[[3]]\n     V1 y\n21 6.31 3\n22 5.12 3\n23 5.54 3\n24 5.50 3\n25 5.37 3\n26 5.29 3\n27 4.92 3\n28 6.15 3\n29 5.80 3\n30 5.26 3\n\n",
        "> ",
        "  if (is.null(bw)) {",
        "+ ",
        "",
        "+ ",
        "    ind = list()",
        "+ ",
        "    train = list()",
        "+ ",
        "    test = list()",
        "+ ",
        "",
        "+ ",
        "    for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "      ind[[k]] <- sample(2, nrow(subset_data[[k]]),",
        "+ ",
        "                         replace = T, prob = c(0.8, 0.2))",
        "+ ",
        "",
        "+ ",
        "      train[[k]] <- subset_data[[k]][ind[[k]] == 1,]",
        "+ ",
        "      test[[k]] <- subset_data[[k]][ind[[k]] == 2,]",
        "+ ",
        "",
        "+ ",
        "      for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "        h[i,k] = grid_loss(train = train[[k]][, i], test = test[[k]][,i])",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        " h",
        "       [,1]   [,2]   [,3]\n[1,] 0.7625 1.5625 0.1625\n",
        "> ",
        "x <- as.matrix(PlantGrowth[, 1])",
        "> ",
        "y <- PlantGrowth[,2]",
        "> ",
        "  n_x = ncol(x) # no. of column in x",
        "> ",
        "  n_class = length(unique(y)) # no. of class",
        "> ",
        "  class_name = unique(y) #name of the class",
        "> ",
        "  prior = rep(NA, n_class)",
        "> ",
        "  for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "    class = noquote(as.character(unique(y)))",
        "+ ",
        "    prior[k] = length(which(y == class[k]))/length(y)",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  length_prior = length(prior) # no. of prior",
        "> ",
        "  if (length_prior != n_class) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"prior must have the same length as the number or class\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  if (sum(prior) != 1) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"sum of prior must equal to 1\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "bw",
        "NULL\n",
        "> ",
        "  class_name = unique(y) #name of the class",
        "> ",
        "  prior = rep(NA, n_class)",
        "> ",
        "  for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "    class = noquote(as.character(unique(y)))",
        "+ ",
        "    prior[k] = length(which(y == class[k]))/length(y)",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  length_prior = length(prior) # no. of prior",
        "> ",
        "  if (length_prior != n_class) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"prior must have the same length as the number or class\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  if (sum(prior) != 1) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"sum of prior must equal to 1\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "> ",
        "  data <- as.data.frame(cbind(x, y))",
        "> ",
        "  subset_data = subset.data(data)",
        "> ",
        "  h = matrix(NA, ncol = n_class, nrow = n_x)",
        "> ",
        "  if (is.character(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (bw == \"Silverman\") {",
        "+ ",
        "",
        "+ ",
        "      for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "        for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = round(bw.nrd0(subset_data[[j]][,i]),4)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    } else if (bw == \"SJ\") {",
        "+ ",
        "",
        "+ ",
        "        for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "          for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = bw.SJ(subset_data[[j]][,i])",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "  if (is.null(bw)) {",
        "+ ",
        "",
        "+ ",
        "    ind = list()",
        "+ ",
        "    train = list()",
        "+ ",
        "    test = list()",
        "+ ",
        "",
        "+ ",
        "    for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "      ind[[k]] <- sample(2, nrow(subset_data[[k]]),",
        "+ ",
        "                         replace = T, prob = c(0.8, 0.2))",
        "+ ",
        "",
        "+ ",
        "      train[[k]] <- subset_data[[k]][ind[[k]] == 1,]",
        "+ ",
        "      test[[k]] <- subset_data[[k]][ind[[k]] == 2,]",
        "+ ",
        "",
        "+ ",
        "      for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "        h[i,k] = grid_loss(train = train[[k]][, i], test = test[[k]][,i])",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "h",
        "       [,1]   [,2]   [,3]\n[1,] 0.6625 0.2625 0.2625\n",
        "> ",
        "    if (is.numeric(bw)) {",
        "+ ",
        "",
        "+ ",
        "          if (length(bw) != n_x * n_class) {",
        "+ ",
        "",
        "+ ",
        "             stop(\"Number of bandwidth is invalid\")",
        "+ ",
        "",
        "+ ",
        "        } else {",
        "+ ",
        "",
        "+ ",
        "      h= matrix(bw, byrow = T, ncol = n_class)",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "> ",
        "   if (is.matrix(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (nrow(bw) != n_x) {",
        "+ ",
        "",
        "+ ",
        "      stop(\"Number of row for bandwidth is invalid. Number of column must equal to number of class\")",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "",
        "+ ",
        "    if (ncol(bw) != n_class) {",
        "+ ",
        "",
        "+ ",
        "      h = matrix(rep(bw, n_class), ncol= n_class)",
        "+ ",
        "",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "   }",
        "> ",
        "    if (is.matrix(bw)) {",
        "+ ",
        "",
        "+ ",
        "      if (nrow(bw) == n_x) {",
        "+ ",
        "",
        "+ ",
        "        if (ncol(bw) == n_class) {",
        "+ ",
        "",
        "+ ",
        "        h =bw",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "> ",
        "  bw_matrix = h",
        "> ",
        "  # no. of column is number of class",
        "> ",
        "  # no. of row is number of variables",
        "> ",
        "  colnames(bw_matrix) <- class_name",
        "> ",
        "  rownames(bw_matrix) <- names(x)",
        "> ",
        "  prior_matrix <- matrix(prior, nrow = 1)",
        "> ",
        "  colnames(prior_matrix) <- class_name",
        "> ",
        "  structure(list(data = list(x = x, y = y), prior = prior_matrix,",
        "+ ",
        "                bandwidth= bw_matrix))",
        "$data\n$data$x\n      [,1]\n [1,] 4.17\n [2,] 5.58\n [3,] 5.18\n [4,] 6.11\n [5,] 4.50\n [6,] 4.61\n [7,] 5.17\n [8,] 4.53\n [9,] 5.33\n[10,] 5.14\n[11,] 4.81\n[12,] 4.17\n[13,] 4.41\n[14,] 3.59\n[15,] 5.87\n[16,] 3.83\n[17,] 6.03\n[18,] 4.89\n[19,] 4.32\n[20,] 4.69\n[21,] 6.31\n[22,] 5.12\n[23,] 5.54\n[24,] 5.50\n[25,] 5.37\n[26,] 5.29\n[27,] 4.92\n[28,] 6.15\n[29,] 5.80\n[30,] 5.26\n\n$data$y\n [1] ctrl ctrl ctrl ctrl ctrl ctrl ctrl ctrl ctrl ctrl\n[11] trt1 trt1 trt1 trt1 trt1 trt1 trt1 trt1 trt1 trt1\n[21] trt2 trt2 trt2 trt2 trt2 trt2 trt2",
        " trt2 trt2 trt2\nLevels: ctrl trt1 trt2\n\n\n$prior\n          ctrl      trt1      trt2\n[1,] 0.3333333 0.3333333 0.3333333\n\n$bandwidth\n       ctrl   trt1   trt2\n[1,] 0.6625 0.2625 0.2625\n\n",
        "> ",
        "fit_nbkde = function(x, y, bw = \"Silverman\") {",
        "+ ",
        "",
        "+ ",
        "  n_x = ncol(x) # no. of column in x",
        "+ ",
        "",
        "+ ",
        "  n_class = length(unique(y)) # no. of class",
        "+ ",
        "",
        "+ ",
        "  class_name = unique(y) #name of the class",
        "+ ",
        "",
        "+ ",
        "  prior = rep(NA, n_class)",
        "+ ",
        "",
        "+ ",
        "  for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "    class = noquote(as.character(unique(y)))",
        "+ ",
        "    prior[k] = length(which(y == class[k]))/length(y)",
        "+ ",
        "",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  length_prior = length(prior) # no. of prior",
        "+ ",
        "",
        "+ ",
        "  if (length_prior != n_class) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"prior must have the same length as the number or class\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (sum(prior) != 1) {",
        "+ ",
        "",
        "+ ",
        "    stop(\"sum of prior must equal to 1\")",
        "+ ",
        "",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  data <- as.data.frame(cbind(x, y))",
        "+ ",
        "",
        "+ ",
        "  subset_data = subset.data(data)",
        "+ ",
        "",
        "+ ",
        "  h = matrix(NA, ncol = n_class, nrow = n_x)",
        "+ ",
        "",
        "+ ",
        "  if (is.character(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (bw == \"Silverman\") {",
        "+ ",
        "",
        "+ ",
        "      for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "        for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = round(bw.nrd0(subset_data[[j]][,i]),4)",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    } else if (bw == \"SJ\") {",
        "+ ",
        "",
        "+ ",
        "        for (j in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "          for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "            h[i, j] = bw.SJ(subset_data[[j]][,i])",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  if (is.null(bw)) {",
        "+ ",
        "",
        "+ ",
        "    ind = list()",
        "+ ",
        "    train = list()",
        "+ ",
        "    test = list()",
        "+ ",
        "",
        "+ ",
        "    for (k in 1:n_class) {",
        "+ ",
        "",
        "+ ",
        "      ind[[k]] <- sample(2, nrow(subset_data[[k]]),",
        "+ ",
        "                         replace = T, prob = c(0.8, 0.2))",
        "+ ",
        "",
        "+ ",
        "      train[[k]] <- subset_data[[k]][ind[[k]] == 1,]",
        "+ ",
        "      test[[k]] <- subset_data[[k]][ind[[k]] == 2,]",
        "+ ",
        "",
        "+ ",
        "      for (i in 1:n_x) {",
        "+ ",
        "",
        "+ ",
        "        h[i,k] = grid_loss(train = train[[k]][, i], test = test[[k]][,i])",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "    if (is.numeric(bw)) {",
        "+ ",
        "",
        "+ ",
        "          if (length(bw) != n_x * n_class) {",
        "+ ",
        "",
        "+ ",
        "             stop(\"Number of bandwidth is invalid\")",
        "+ ",
        "",
        "+ ",
        "        } else {",
        "+ ",
        "",
        "+ ",
        "      h= matrix(bw, byrow = T, ncol = n_class)",
        "+ ",
        "",
        "+ ",
        "        }",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "   if (is.matrix(bw)) {",
        "+ ",
        "",
        "+ ",
        "    if (nrow(bw) != n_x) {",
        "+ ",
        "",
        "+ ",
        "      stop(\"Number of row for bandwidth is invalid. Number of column must equal to number of class\")",
        "+ ",
        "",
        "+ ",
        "      }",
        "+ ",
        "",
        "+ ",
        "    if (ncol(bw) != n_class) {",
        "+ ",
        "",
        "+ ",
        "      h = matrix(rep(bw, n_class), ncol= n_class)",
        "+ ",
        "",
        "+ ",
        "    }",
        "+ ",
        "",
        "+ ",
        "   }",
        "+ ",
        "",
        "+ ",
        "    if (is.matrix(bw)) {",
        "+ ",
        "",
        "+ ",
        "      if (nrow(bw) == n_x) {",
        "+ ",
        "",
        "+ ",
        "        if (ncol(bw) == n_class) {",
        "+ ",
        "",
        "+ ",
        "        h =bw",
        "+ ",
        "      }",
        "+ ",
        "    }",
        "+ ",
        "  }",
        "+ ",
        "",
        "+ ",
        "  bw_matrix = h",
        "+ ",
        "  # no. of column is number of class",
        "+ ",
        "  # no. of row is number of variables",
        "+ ",
        "  colnames(bw_matrix) <- class_name",
        "+ ",
        "  rownames(bw_matrix) <- names(x)",
        "+ ",
        "",
        "+ ",
        "  prior_matrix <- matrix(prior, nrow = 1)",
        "+ ",
        "  colnames(prior_matrix) <- class_name",
        "+ ",
        "",
        "+ ",
        "  structure(list(data = list(x = x, y = y), prior = prior_matrix,",
        "+ ",
        "                bandwidth= bw_matrix))",
        "+ ",
        "",
        "+ ",
        "}",
        "\nRestarting R session...\n\n"
    ]
}